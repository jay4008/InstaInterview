{
  "quiz": [
    {
      "id": 1,
      "category": "Basic",
      "question": "What is the default value of a boolean variable in Java?",
      "options": [
        "true",
        "false",
        "null",
        "0"
      ],
      "correct_answer": 1,
      "explanation": "In Java, the default value of a boolean variable is 'false'."
    },
    {
      "id": 2,
      "category": "Basic",
      "question": "Which of the following is the correct syntax to declare a string in Java?",
      "options": [
        "String s = 'Hello';",
        "String s = \"Hello\";",
        "string s = 'Hello';",
        "string s = \"Hello\";"
      ],
      "correct_answer": 1,
      "explanation": "In Java, strings must be declared using double quotes: String s = \"Hello\"."
    },
    {
      "id": 3,
      "category": "Basic",
      "question": "What is the output of the following code?\n\nint a = 5, b = 10;\nSystem.out.println(a + b);",
      "options": [
        "15",
        "510",
        "Error",
        "undefined"
      ],
      "correct_answer": 0,
      "explanation": "In Java, the '+' operator is used for addition when applied to numbers. So, a + b will result in 15."
    },
    {
      "id": 4,
      "category": "Intermediate",
      "question": "What is the correct syntax for a while loop in Java?",
      "options": [
        "while i > 0 { }",
        "while (i > 0) { }",
        "while i > 0; { }",
        "while (i > 0) {"
      ],
      "correct_answer": 1,
      "explanation": "The correct syntax for a while loop in Java is: while (condition) { }."
    },
    {
      "id": 5,
      "category": "Intermediate",
      "question": "Which of the following is NOT a valid access modifier in Java?",
      "options": [
        "public",
        "private",
        "protected",
        "internal"
      ],
      "correct_answer": 3,
      "explanation": "In Java, valid access modifiers are 'public', 'private', and 'protected'. 'internal' is not a valid modifier in Java."
    },
    {
      "id": 6,
      "category": "Intermediate",
      "question": "What will be the output of the following code?\n\nint a = 3, b = 2;\nSystem.out.println(a / b);",
      "options": [
        "1.5",
        "1",
        "2",
        "Error"
      ],
      "correct_answer": 1,
      "explanation": "In Java, dividing two integers results in an integer value, so 3 / 2 will return 1."
    },
    {
      "id": 7,
      "category": "Intermediate",
      "question": "Which of the following is used to create a new thread in Java?",
      "options": [
        "Thread t = new Thread();",
        "Thread t = new ThreadRunnable();",
        "Thread t = new Runnable();",
        "Thread t = new ThreadRunnable() {};"
      ],
      "correct_answer": 0,
      "explanation": "In Java, a new thread is created using the Thread class, and it is initialized with the 'Thread t = new Thread();' syntax."
    },
    {
      "id": 8,
      "category": "Advanced",
      "question": "What is the difference between '== 'and '.equals()' in Java?",
      "options": [
        "'==' checks reference equality, while '.equals()' checks object content equality.",
        "'.equals()' checks reference equality, while '==' checks object content equality.",
        "'==' and '.equals()' are the same.",
        "Both are used to check memory addresses."
      ],
      "correct_answer": 0,
      "explanation": "In Java, '==' compares object references, while '.equals()' is used to compare the actual content of the objects."
    },
    {
      "id": 9,
      "category": "Advanced",
      "question": "What is the purpose of the 'super' keyword in Java?",
      "options": [
        "It is used to call a method from the parent class.",
        "It is used to create an instance of a class.",
        "It is used to call a method in the current class.",
        "It is used to declare a constructor."
      ],
      "correct_answer": 0,
      "explanation": "'super' is used to refer to the parent class and to call its methods or constructor."
    },
    {
      "id": 10,
      "category": "Advanced",
      "question": "What will the following code output?\n\nclass Parent {\n  void display() { System.out.println('Parent display'); }\n}\nclass Child extends Parent {\n  void display() { System.out.println('Child display'); }\n}\npublic class Test {\n  public static void main(String[] args) {\n    Parent obj = new Child();\n    obj.display();\n  }\n}",
      "options": [
        "Parent display",
        "Child display",
        "Error",
        "NullPointerException"
      ],
      "correct_answer": 1,
      "explanation": "The code demonstrates method overriding. The Child class overrides the display method, and the object is of type Child, so 'Child display' will be printed."
    },
    {
      "id": 11,
      "category": "Basic",
      "question": "Which of the following is used to declare a constant in Java?",
      "options": [
        "final int x = 10;",
        "int const x = 10;",
        "constant int x = 10;",
        "final x = 10;"
      ],
      "correct_answer": 0,
      "explanation": "In Java, constants are declared using the 'final' keyword, like 'final int x = 10;'."
    },
    {
      "id": 12,
      "category": "Basic",
      "question": "What will the following code output?\n\nint[] arr = {1, 2, 3};\nSystem.out.println(arr[1]);",
      "options": [
        "1",
        "2",
        "3",
        "Error"
      ],
      "correct_answer": 1,
      "explanation": "Array indexing starts from 0. So arr[1] refers to the second element in the array, which is 2."
    },
    {
      "id": 13,
      "category": "Intermediate",
      "question": "Which of the following methods is used to find the length of an array in Java?",
      "options": [
        "arr.size()",
        "arr.length()",
        "arr.length",
        "arr.getLength()"
      ],
      "correct_answer": 2,
      "explanation": "In Java, the length of an array is accessed using the 'length' property, not a method."
    },
    {
      "id": 14,
      "category": "Intermediate",
      "question": "What is the result of the following expression?\n\nint x = 5;\nint y = 10;\nSystem.out.println(x++ + ++y);",
      "options": [
        "15",
        "16",
        "14",
        "Error"
      ],
      "correct_answer": 1,
      "explanation": "The post-increment operator 'x++' uses the current value of x (5), and then x is incremented. The pre-increment operator '++y' increments y to 11 before it is used. The sum is 5 + 11 = 16."
    },
    {
      "id": 15,
      "category": "Intermediate",
      "question": "What is the output of the following code?\n\nint i = 0;\nfor (i = 0; i < 3; i++) {\n  System.out.println(i);\n}",
      "options": [
        "0 1 2",
        "1 2 3",
        "0 1 2 3",
        "Error"
      ],
      "correct_answer": 0,
      "explanation": "The for loop starts at i = 0 and runs as long as i < 3. The output will be '0 1 2'."
    },
    {
      "id": 16,
      "category": "Advanced",
      "question": "Which of the following classes is used to create a thread in Java?",
      "options": [
        "Thread",
        "Runnable",
        "Task",
        "Job"
      ],
      "correct_answer": 0,
      "explanation": "The 'Thread' class is used to create and manage threads in Java."
    },
    {
      "id": 17,
      "category": "Advanced",
      "question": "What is the purpose of the 'this' keyword in Java?",
      "options": [
        "It refers to the current object.",
        "It refers to the parent class.",
        "It refers to a static variable.",
        "It is used to declare a constructor."
      ],
      "correct_answer": 0,
      "explanation": "The 'this' keyword in Java refers to the current object and is used to distinguish instance variables from local variables."
    },
    {
      "id": 18,
      "category": "Advanced",
      "question": "What is the output of the following code?\n\nclass Test {\n  private String name = 'John';\n  public static void main(String[] args) {\n    Test obj = new Test();\n    System.out.println(obj.name);\n  }\n}",
      "options": [
        "John",
        "null",
        "Error",
        "undefined"
      ],
      "correct_answer": 0,
      "explanation": "The 'name' variable is initialized to 'John', so it will print 'John'."
    },
    {
      "id": 19,
      "category": "Advanced",
      "question": "Which of the following is the correct way to handle exceptions in Java?",
      "options": [
        "try-catch block",
        "try-catch-finally block",
        "throw-catch block",
        "catch-try block"
      ],
      "correct_answer": 1,
      "explanation": "In Java, exceptions are handled using the 'try-catch-finally' block. The 'finally' block is optional but can be used to execute code after the try-catch, regardless of whether an exception was thrown."
    },
    {
      "id": 20,
      "category": "Advanced",
      "question": "What is the purpose of the 'super' keyword in Java?",
      "options": [
        "It refers to the superclass of the current object.",
        "It is used to create a new instance of a class.",
        "It is used to refer to a static variable in the current class.",
        "It is used to terminate the program."
      ],
      "correct_answer": 0,
      "explanation": "The 'super' keyword in Java is used to refer to the superclass (parent class) of the current object, often used to call the parent class constructor or methods."
    },
    {
      "id": 21,
      "category": "Basic",
      "question": "Which of the following data types is used to store a single character in Java?",
      "options": [
        "String",
        "char",
        "Character",
        "boolean"
      ],
      "correct_answer": 1,
      "explanation": "In Java, 'char' is used to store a single character."
    },
    {
      "id": 22,
      "category": "Basic",
      "question": "What is the default value of an integer in Java?",
      "options": [
        "0",
        "null",
        "undefined",
        "NaN"
      ],
      "correct_answer": 0,
      "explanation": "The default value of an integer (int) in Java is 0."
    },
    {
      "id": 23,
      "category": "Intermediate",
      "question": "What will the following code print?\n\nint a = 2, b = 3;\nSystem.out.println(a == b);",
      "options": [
        "true",
        "false",
        "0",
        "Error"
      ],
      "correct_answer": 1,
      "explanation": "Since a (2) is not equal to b (3), the result of the comparison 'a == b' will be false."
    },
    {
      "id": 24,
      "category": "Intermediate",
      "question": "What is the purpose of the 'continue' statement in Java?",
      "options": [
        "It stops the execution of the current loop and exits.",
        "It skips the current iteration of the loop and moves to the next iteration.",
        "It terminates the program.",
        "It executes the loop from the beginning."
      ],
      "correct_answer": 1,
      "explanation": "The 'continue' statement is used in loops to skip the current iteration and proceed with the next iteration."
    },
    {
      "id": 25,
      "category": "Intermediate",
      "question": "What is the result of the following expression?\n\nint a = 10, b = 3;\nSystem.out.println(a / b);",
      "options": [
        "3.33",
        "3",
        "4",
        "Error"
      ],
      "correct_answer": 1,
      "explanation": "In Java, when dividing two integers, the result is an integer. So, 10 / 3 will result in 3."
    },
    {
      "id": 26,
      "category": "Advanced",
      "question": "What does the 'instanceof' operator do in Java?",
      "options": [
        "Checks if an object is an instance of a specific class.",
        "Checks if a variable is an instance of a class.",
        "Checks the type of a variable.",
        "Checks if an object is not null."
      ],
      "correct_answer": 0,
      "explanation": "The 'instanceof' operator is used to check if an object is an instance of a specific class or its subclass."
    },
    {
      "id": 27,
      "category": "Advanced",
      "question": "Which of the following is true about the 'final' keyword in Java?",
      "options": [
        "'final' can be used to define constants, prevent method overriding, and prevent inheritance.",
        "'final' can only be used with methods.",
        "'final' can only be used with classes.",
        "'final' is used to restrict access to variables."
      ],
      "correct_answer": 0,
      "explanation": "The 'final' keyword can be used to define constants, prevent method overriding, and prevent inheritance."
    },
    {
      "id": 28,
      "category": "Advanced",
      "question": "Which of the following is used to handle exceptions in Java?",
      "options": [
        "throw",
        "try-catch",
        "throw-catch",
        "try-catch-finally"
      ],
      "correct_answer": 3,
      "explanation": "In Java, exceptions can be handled using the 'try-catch-finally' block. The 'finally' block is optional but is always executed after the try-catch block."
    },
    {
      "id": 29,
      "category": "Advanced",
      "question": "What will be the output of the following code?\n\nclass A {\n  void show() { System.out.println('A show'); }\n}\nclass B extends A {\n  void show() { System.out.println('B show'); }\n}\npublic class Test {\n  public static void main(String[] args) {\n    A obj = new B();\n    obj.show();\n  }\n}",
      "options": [
        "A show",
        "B show",
        "Error",
        "NullPointerException"
      ],
      "correct_answer": 1,
      "explanation": "This is an example of method overriding. The object is of type 'B', so the overridden method in class 'B' is called, and 'B show' will be printed."
    },
    {
      "id": 30,
      "category": "Advanced",
      "question": "Which of the following is used to sort a list in Java?",
      "options": [
        "sort()",
        "Collections.sort()",
        "List.sort()",
        "Array.sort()"
      ],
      "correct_answer": 1,
      "explanation": "In Java, the 'Collections.sort()' method is used to sort a list."
    },
    {
      "id": 31,
      "category": "Basic",
      "question": "Which of the following is the correct syntax for a constructor in Java?",
      "options": [
        "public MyClass() {}",
        "public void MyClass() {}",
        "void MyClass() {}",
        "MyClass() {}"
      ],
      "correct_answer": 0,
      "explanation": "In Java, a constructor is a special method used to initialize objects, and it has the same name as the class. It does not have a return type."
    },
    {
      "id": 32,
      "category": "Basic",
      "question": "Which of the following is used to return a value from a method in Java?",
      "options": [
        "return",
        "break",
        "exit",
        "continue"
      ],
      "correct_answer": 0,
      "explanation": "The 'return' keyword is used to return a value from a method in Java."
    },
    {
      "id": 33,
      "category": "Intermediate",
      "question": "What is the output of the following code?\n\nint[] arr = {2, 4, 6};\nSystem.out.println(arr[0] + arr[1]);",
      "options": [
        "2",
        "6",
        "8",
        "Error"
      ],
      "correct_answer": 2,
      "explanation": "The sum of arr[0] (2) and arr[1] (4) is 6, so the output is 8."
    },
    {
      "id": 34,
      "category": "Intermediate",
      "question": "Which of the following is true about Java interfaces?",
      "options": [
        "Interfaces can have method implementations.",
        "Interfaces cannot be inherited.",
        "Interfaces can contain only abstract methods.",
        "A class can implement multiple interfaces."
      ],
      "correct_answer": 3,
      "explanation": "In Java, a class can implement multiple interfaces, unlike class inheritance which is limited to one class."
    },
    {
      "id": 35,
      "category": "Intermediate",
      "question": "Which of the following is the correct way to initialize an ArrayList in Java?",
      "options": [
        "ArrayList list = new ArrayList();",
        "ArrayList list = new ArrayList[]();",
        "ArrayList[] list = new ArrayList();",
        "ArrayList list = new List();"
      ],
      "correct_answer": 0,
      "explanation": "In Java, you can initialize an ArrayList using 'ArrayList list = new ArrayList();'."
    },
    {
      "id": 36,
      "category": "Advanced",
      "question": "What is the result of the following code?\n\nString str = 'Hello';\nstr = str.concat(' World');\nSystem.out.println(str);",
      "options": [
        "Hello World",
        "HelloWorld",
        "Error",
        "null"
      ],
      "correct_answer": 0,
      "explanation": "The 'concat' method in Java concatenates the strings, so the result will be 'Hello World'."
    },
    {
      "id": 37,
      "category": "Advanced",
      "question": "Which of the following is used to perform method overloading in Java?",
      "options": [
        "By changing the return type of the method.",
        "By changing the method name.",
        "By changing the method parameters.",
        "None of the above."
      ],
      "correct_answer": 2,
      "explanation": "Method overloading is achieved by changing the method parameters (number or type of parameters), not the return type or method name."
    },
    {
      "id": 38,
      "category": "Advanced",
      "question": "Which of the following is true about Java's 'String' class?",
      "options": [
        "Strings are immutable in Java.",
        "Strings are mutable in Java.",
        "Strings are synchronized in Java.",
        "Strings can only be created using new keyword."
      ],
      "correct_answer": 0,
      "explanation": "In Java, strings are immutable, meaning once created, their value cannot be changed."
    },
    {
      "id": 39,
      "category": "Advanced",
      "question": "What is the output of the following code?\n\nint[] arr = new int[3];\nSystem.out.println(arr[1]);",
      "options": [
        "0",
        "null",
        "undefined",
        "Error"
      ],
      "correct_answer": 0,
      "explanation": "In Java, arrays are initialized with default values. Since the array is of type int, its elements will be initialized to 0 by default."
    },
    {
      "id": 40,
      "category": "Advanced",
      "question": "Which of the following is the correct way to create an instance of a class in Java?",
      "options": [
        "ClassName obj = new ClassName();",
        "obj = new ClassName();",
        "ClassName obj = ClassName();",
        "new ClassName() = obj;"
      ],
      "correct_answer": 0,
      "explanation": "In Java, an instance of a class is created using 'ClassName obj = new ClassName();'."
    },
    {
      "id": 41,
      "category": "Basic",
      "question": "Which of the following is the correct way to create a method in Java?",
      "options": [
        "public void myMethod() {}",
        "void public myMethod() {}",
        "myMethod void() {}",
        "void method myMethod() {}"
      ],
      "correct_answer": 0,
      "explanation": "The correct syntax for creating a method in Java is 'public void myMethod() {}'."
    },
    {
      "id": 42,
      "category": "Basic",
      "question": "What is the default value of a boolean variable in Java?",
      "options": [
        "true",
        "false",
        "null",
        "undefined"
      ],
      "correct_answer": 1,
      "explanation": "The default value of a boolean variable in Java is 'false'."
    },
    {
      "id": 43,
      "category": "Intermediate",
      "question": "What will the following code output?\n\nint x = 10, y = 5;\nSystem.out.println(x / y);",
      "options": [
        "2",
        "5",
        "1",
        "Error"
      ],
      "correct_answer": 0,
      "explanation": "The result of dividing x (10) by y (5) is 2."
    },
    {
      "id": 44,
      "category": "Intermediate",
      "question": "Which of the following is used to create a thread in Java?",
      "options": [
        "Thread.start()",
        "Thread.run()",
        "Thread.create()",
        "Thread.execute()"
      ],
      "correct_answer": 0,
      "explanation": "To create and start a thread, you use the 'Thread.start()' method."
    },
    {
      "id": 45,
      "category": "Intermediate",
      "question": "What is the purpose of the 'finally' block in exception handling?",
      "options": [
        "It is always executed, regardless of whether an exception is thrown.",
        "It is used to handle specific types of exceptions.",
        "It is used to propagate the exception to the calling method.",
        "It is used to re-throw an exception."
      ],
      "correct_answer": 0,
      "explanation": "The 'finally' block is always executed, whether or not an exception is thrown. It is typically used to release resources."
    },
    {
      "id": 46,
      "category": "Advanced",
      "question": "What is the output of the following code?\n\nint a = 10;\nif (a > 5) {\n  System.out.println('Yes');\n} else {\n  System.out.println('No');\n}",
      "options": [
        "Yes",
        "No",
        "Error",
        "undefined"
      ],
      "correct_answer": 0,
      "explanation": "Since a (10) is greater than 5, the 'if' condition is true and 'Yes' will be printed."
    },
    {
      "id": 47,
      "category": "Advanced",
      "question": "Which of the following can be used to handle multiple exceptions in a single 'catch' block in Java?",
      "options": [
        "Multiple catch blocks",
        "Multiple exceptions separated by '|'",
        "Multi-catch using '|' in catch block",
        "None of the above"
      ],
      "correct_answer": 2,
      "explanation": "Java allows handling multiple exceptions in a single 'catch' block using the multi-catch feature (e.g., 'catch (IOException | SQLException e)')."
    },
    {
      "id": 48,
      "category": "Advanced",
      "question": "Which of the following is used to make a class immutable in Java?",
      "options": [
        "Using the 'final' keyword for class and variables",
        "Using private constructors",
        "Using getter methods instead of setters",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "To make a class immutable in Java, use 'final' for class and variables, make constructors private, and provide getter methods without setters."
    },
    {
      "id": 49,
      "category": "Advanced",
      "question": "What will be the output of the following code?\n\nString str = 'Java';\nstr = str.toLowerCase();\nSystem.out.println(str);",
      "options": [
        "java",
        "JAVA",
        "Error",
        "java()"
      ],
      "correct_answer": 0,
      "explanation": "The 'toLowerCase()' method converts all characters in the string to lowercase, so the output will be 'java'."
    },
    {
      "id": 50,
      "category": "Advanced",
      "question": "Which of the following is correct for the 'super' keyword in Java?",
      "options": [
        "It refers to the current instance of the class.",
        "It refers to the parent class.",
        "It is used to call static methods of a class.",
        "It is used to declare a constructor."
      ],
      "correct_answer": 1,
      "explanation": "'super' is used to refer to the parent class and can be used to call the parent class's constructor or methods."
    },
    {
      "id": 51,
      "category": "Basic",
      "question": "Which of the following is the correct syntax for declaring a constant in Java?",
      "options": [
        "const int x = 10;",
        "final int x = 10;",
        "static int x = 10;",
        "int final x = 10;"
      ],
      "correct_answer": 1,
      "explanation": "In Java, you use the 'final' keyword to declare a constant. For example: 'final int x = 10;'."
    },
    {
      "id": 52,
      "category": "Basic",
      "question": "Which keyword is used to prevent a method from being overridden in Java?",
      "options": [
        "final",
        "static",
        "private",
        "protected"
      ],
      "correct_answer": 0,
      "explanation": "The 'final' keyword is used to prevent a method from being overridden in Java."
    },
    {
      "id": 53,
      "category": "Intermediate",
      "question": "Which of the following data structures is used to store unique elements in Java?",
      "options": [
        "List",
        "Set",
        "Queue",
        "Map"
      ],
      "correct_answer": 1,
      "explanation": "The 'Set' data structure in Java is used to store unique elements, unlike a 'List', which allows duplicate elements."
    },
    {
      "id": 54,
      "category": "Intermediate",
      "question": "What is the output of the following code?\n\nint x = 10;\nif (x > 5) {\n  System.out.println('Greater');\n} else {\n  System.out.println('Smaller');\n}",
      "options": [
        "Greater",
        "Smaller",
        "Error",
        "undefined"
      ],
      "correct_answer": 0,
      "explanation": "Since x is 10 and greater than 5, the output will be 'Greater'."
    },
    {
      "id": 55,
      "category": "Intermediate",
      "question": "Which of the following statements is true about Java arrays?",
      "options": [
        "Arrays can hold elements of different types.",
        "Arrays in Java are dynamic in size.",
        "Arrays are of fixed size once created.",
        "Arrays can only hold primitive data types."
      ],
      "correct_answer": 2,
      "explanation": "In Java, arrays are of fixed size once created, meaning their size cannot be changed."
    },
    {
      "id": 56,
      "category": "Advanced",
      "question": "What is the output of the following code?\n\nint[] arr = {1, 2, 3};\nSystem.out.println(arr.length);",
      "options": [
        "1",
        "2",
        "3",
        "Error"
      ],
      "correct_answer": 2,
      "explanation": "The 'length' property of an array returns the number of elements in the array. Here, the array contains 3 elements."
    },
    {
      "id": 57,
      "category": "Advanced",
      "question": "Which of the following methods is used to convert a string to an integer in Java?",
      "options": [
        "String.toInt()",
        "Integer.parseInt()",
        "Integer.convert()",
        "String.parseInt()"
      ],
      "correct_answer": 1,
      "explanation": "In Java, the 'Integer.parseInt()' method is used to convert a string to an integer."
    },
    {
      "id": 58,
      "category": "Advanced",
      "question": "What does the 'this' keyword refer to in Java?",
      "options": [
        "The current method",
        "The current class",
        "The current instance of the class",
        "The parent class"
      ],
      "correct_answer": 2,
      "explanation": "In Java, 'this' refers to the current instance of the class."
    },
    {
      "id": 59,
      "category": "Advanced",
      "question": "Which of the following classes is used to handle dates in Java?",
      "options": [
        "DateTime",
        "Calendar",
        "Date",
        "Time"
      ],
      "correct_answer": 2,
      "explanation": "In Java, the 'Date' class is used to handle dates, but it has been replaced with more modern classes like 'LocalDate' in recent versions."
    },
    {
      "id": 60,
      "category": "Advanced",
      "question": "Which of the following statements is true about method overriding in Java?",
      "options": [
        "The method signature in the subclass must be different from the superclass.",
        "The return type of the overriding method must be the same or covariant to the superclass method.",
        "The overriding method in the subclass can have a different access modifier.",
        "All of the above"
      ],
      "correct_answer": 3,
      "explanation": "In Java, method overriding requires that the method signature is the same, the return type must be the same or covariant, and the access modifier can be the same or more accessible than the superclass method."
    },
    {
      "id": 61,
      "category": "OOP",
      "question": "Which of the following is NOT a feature of Object-Oriented Programming?",
      "options": [
        "Encapsulation",
        "Inheritance",
        "Polymorphism",
        "Compilation"
      ],
      "correct_answer": 3,
      "explanation": "Compilation is not a feature of OOP. OOP focuses on concepts like encapsulation, inheritance, and polymorphism."
    },
    {
      "id": 62,
      "category": "OOP",
      "question": "What is the primary purpose of encapsulation in Java?",
      "options": [
        "To hide the internal details of an object and expose only necessary information.",
        "To allow one class to inherit the properties and methods of another.",
        "To provide multiple methods with the same name.",
        "To prevent access to private methods."
      ],
      "correct_answer": 0,
      "explanation": "Encapsulation is the concept of hiding the internal details of an object and providing access only through public methods (getters and setters)."
    },
    {
      "id": 63,
      "category": "OOP",
      "question": "What is inheritance in Java?",
      "options": [
        "When a class inherits methods and properties from a superclass.",
        "When an object contains another object as a member.",
        "When an object calls its own methods.",
        "When a class can be used as a subclass."
      ],
      "correct_answer": 0,
      "explanation": "Inheritance allows one class (subclass) to inherit methods and properties from another class (superclass)."
    },
    {
      "id": 64,
      "category": "OOP",
      "question": "Which of the following is an example of polymorphism in Java?",
      "options": [
        "A class with multiple constructors.",
        "A method that can take different types of arguments.",
        "A subclass that inherits from a superclass.",
        "A class with abstract methods."
      ],
      "correct_answer": 1,
      "explanation": "Polymorphism in Java allows a method to have different implementations depending on the type of arguments passed to it (e.g., method overloading and overriding)."
    },
    {
      "id": 65,
      "category": "OOP",
      "question": "What is the difference between method overloading and method overriding in Java?",
      "options": [
        "Method overloading is when two methods have the same name but different parameters, while method overriding is when a subclass provides a specific implementation of a method already defined in the superclass.",
        "Method overloading occurs when a method has multiple return types, while method overriding is when a method is overridden by a subclass.",
        "Method overloading changes the method signature, while method overriding changes the class signature.",
        "Method overloading is not supported in Java."
      ],
      "correct_answer": 0,
      "explanation": "Method overloading involves having multiple methods with the same name but different parameters, while method overriding involves providing a new implementation of an inherited method in a subclass."
    },
    {
      "id": 66,
      "category": "OOP",
      "question": "Which of the following can be declared abstract in Java?",
      "options": [
        "Methods only",
        "Classes only",
        "Methods and classes",
        "Variables only"
      ],
      "correct_answer": 2,
      "explanation": "Both classes and methods can be declared abstract in Java. An abstract class cannot be instantiated, and an abstract method must be implemented in a subclass."
    },
    {
      "id": 67,
      "category": "OOP",
      "question": "What does the 'super' keyword refer to in Java?",
      "options": [
        "It refers to the current object.",
        "It refers to the superclass of the current object.",
        "It refers to the superclass's method.",
        "It is used to create a new object."
      ],
      "correct_answer": 1,
      "explanation": "In Java, 'super' refers to the superclass of the current object. It is used to access methods and constructors of the parent class."
    },
    {
      "id": 68,
      "category": "OOP",
      "question": "Which of the following is true about an interface in Java?",
      "options": [
        "An interface can have method implementations.",
        "An interface can have constructors.",
        "A class can implement multiple interfaces.",
        "An interface can be instantiated directly."
      ],
      "correct_answer": 2,
      "explanation": "In Java, a class can implement multiple interfaces. Interfaces cannot have method implementations (except for default methods in recent versions)."
    },
    {
      "id": 69,
      "category": "OOP",
      "question": "Which keyword is used to create a subclass in Java?",
      "options": [
        "extends",
        "super",
        "implements",
        "inherits"
      ],
      "correct_answer": 0,
      "explanation": "The 'extends' keyword is used to create a subclass in Java, allowing the subclass to inherit methods and properties from the superclass."
    },
    {
      "id": 70,
      "category": "OOP",
      "question": "What is the output of the following code?\n\nclass Animal {\n  void sound() {\n    System.out.println('Animal makes a sound');\n  }\n}\nclass Dog extends Animal {\n  @Override\n  void sound() {\n    System.out.println('Dog barks');\n  }\n}\npublic class Main {\n  public static void main(String[] args) {\n    Animal myDog = new Dog();\n    myDog.sound();\n  }\n}",
      "options": [
        "Animal makes a sound",
        "Dog barks",
        "Error",
        "undefined"
      ],
      "correct_answer": 1,
      "explanation": "This is an example of method overriding. The 'sound' method is overridden in the Dog class, so 'Dog barks' is printed."
    },
    {
      "id": 71,
      "category": "OOP",
      "question": "What is the primary characteristic of an abstract class in Java?",
      "options": [
        "An abstract class can be instantiated directly.",
        "An abstract class can contain both abstract and concrete methods.",
        "An abstract class can only contain abstract methods.",
        "An abstract class can be instantiated but cannot have abstract methods."
      ],
      "correct_answer": 1,
      "explanation": "An abstract class can contain both abstract methods (without implementation) and concrete methods (with implementation)."
    },
    {
      "id": 72,
      "category": "OOP",
      "question": "What happens if a subclass does not override an abstract method of its superclass?",
      "options": [
        "The subclass will compile with a warning.",
        "The subclass will throw a runtime exception.",
        "The subclass must also be declared abstract.",
        "The subclass will inherit the method's default behavior."
      ],
      "correct_answer": 2,
      "explanation": "If a subclass does not override an abstract method, it must be declared as abstract itself."
    },
    {
      "id": 73,
      "category": "OOP",
      "question": "Which of the following is true about constructors in Java?",
      "options": [
        "A constructor can return a value.",
        "A constructor can have a return type.",
        "A constructor must have the same name as the class.",
        "A constructor can be private."
      ],
      "correct_answer": 2,
      "explanation": "A constructor must have the same name as the class and cannot have a return type."
    },
    {
      "id": 74,
      "category": "OOP",
      "question": "What is the output of the following code?\n\nclass Vehicle {\n  public void move() {\n    System.out.println('Vehicle is moving');\n  }\n}\nclass Car extends Vehicle {\n  public void move() {\n    System.out.println('Car is moving');\n  }\n}\nclass Main {\n  public static void main(String[] args) {\n    Vehicle v = new Car();\n    v.move();\n  }\n}",
      "options": [
        "Vehicle is moving",
        "Car is moving",
        "Error",
        "undefined"
      ],
      "correct_answer": 1,
      "explanation": "This is an example of method overriding in action. The method 'move' is overridden in the Car class, so the output will be 'Car is moving'."
    },
    {
      "id": 75,
      "category": "OOP",
      "question": "What does the 'instanceof' operator do in Java?",
      "options": [
        "Checks if an object is an instance of a particular class or interface.",
        "Creates an instance of a class.",
        "Compares two objects for equality.",
        "Returns the class type of an object."
      ],
      "correct_answer": 0,
      "explanation": "The 'instanceof' operator checks if an object is an instance of a specific class or interface."
    },
    {
      "id": 76,
      "category": "OOP",
      "question": "What is method hiding in Java?",
      "options": [
        "When a method in a subclass hides a method in the superclass with the same signature.",
        "When a method is overridden in a subclass.",
        "When a method in the superclass is inaccessible.",
        "When a method in a subclass throws a different exception than the superclass."
      ],
      "correct_answer": 0,
      "explanation": "Method hiding occurs when a method in a subclass hides a method with the same signature in the superclass. It is different from overriding."
    },
    {
      "id": 77,
      "category": "OOP",
      "question": "Which of the following is true about the 'final' keyword in Java?",
      "options": [
        "A final class cannot have any subclasses.",
        "A final method cannot be overridden.",
        "A final variable cannot be reassigned.",
        "All of the above."
      ],
      "correct_answer": 3,
      "explanation": "The 'final' keyword in Java ensures that a class cannot be subclassed, a method cannot be overridden, and a variable cannot be reassigned."
    },
    {
      "id": 78,
      "category": "OOP",
      "question": "What is a static method in Java?",
      "options": [
        "A method that can only be called from an object instance.",
        "A method that can be called without creating an object.",
        "A method that must be overridden in a subclass.",
        "A method that cannot be inherited."
      ],
      "correct_answer": 1,
      "explanation": "A static method can be called without creating an object. It belongs to the class rather than to any instance of the class."
    },
    {
      "id": 79,
      "category": "OOP",
      "question": "What is the purpose of the 'super()' constructor call in a subclass?",
      "options": [
        "To call the constructor of the superclass.",
        "To initialize the variables of the subclass.",
        "To override the constructor of the superclass.",
        "To invoke a method of the superclass."
      ],
      "correct_answer": 0,
      "explanation": "'super()' is used to call the constructor of the superclass, typically to initialize the inherited properties before executing the subclass-specific initialization."
    },
    {
      "id": 80,
      "category": "OOP",
      "question": "What is the output of the following code?\n\nclass Animal {\n  public void makeSound() {\n    System.out.println('Animal makes a sound');\n  }\n}\nclass Dog extends Animal {\n  public void makeSound() {\n    System.out.println('Dog barks');\n  }\n}\nclass Main {\n  public static void main(String[] args) {\n    Animal a = new Animal();\n    Animal b = new Dog();\n    a.makeSound();\n    b.makeSound();\n  }\n}",
      "options": [
        "Animal makes a sound, Dog barks",
        "Dog barks, Dog barks",
        "Animal makes a sound, Animal makes a sound",
        "Error"
      ],
      "correct_answer": 0,
      "explanation": "The first call to makeSound() invokes the method in the Animal class, while the second call invokes the overridden method in the Dog class (method overriding)."
    },
    {
      "id": 91,
      "category": "Advanced",
      "question": "What is the output of the following code?\n\npublic class Main {\n  public static void main(String[] args) {\n    int a = 10;\n    int b = 20;\n    System.out.println(a++ + ++b);\n    System.out.println(a + b);\n  }\n}",
      "options": [
        "31 and 30",
        "31 and 32",
        "32 and 32",
        "30 and 30"
      ],
      "correct_answer": 1,
      "explanation": "In the first statement, 'a++' evaluates to 10 and '++b' evaluates to 21, so the sum is 31. After the operation, 'a' becomes 11 and 'b' becomes 21, so their sum in the second statement is 32."
    },
    {
      "id": 92,
      "category": "Advanced",
      "question": "What will happen if you run the following code?\n\npublic class Main {\n  public static void main(String[] args) {\n    int a = Integer.MAX_VALUE + 1;\n    System.out.println(a);\n  }\n}",
      "options": [
        "It will throw an ArithmeticException.",
        "It will print -2147483648.",
        "It will print 2147483648.",
        "It will print Integer.MAX_VALUE."
      ],
      "correct_answer": 1,
      "explanation": "Integer overflow occurs, and the value wraps around to Integer.MIN_VALUE, which is -2147483648."
    },
    {
      "id": 93,
      "category": "Advanced",
      "question": "What does the following code output?\n\npublic class Main {\n  public static void main(String[] args) {\n    String s1 = 'test';\n    String s2 = new String('test');\n    System.out.println(s1 == s2);\n    System.out.println(s1.equals(s2));\n  }\n}",
      "options": [
        "true and true",
        "true and false",
        "false and true",
        "false and false"
      ],
      "correct_answer": 2,
      "explanation": "'s1 == s2' compares references, which are different, so it returns false. 's1.equals(s2)' compares values, which are the same, so it returns true."
    },
    {
      "id": 94,
      "category": "Advanced",
      "question": "What is the output of the following code?\n\npublic class Main {\n  public static void main(String[] args) {\n    int x = 5;\n    int y = x++ * 2 + ++x;\n    System.out.println(y);\n  }\n}",
      "options": [
        "16",
        "17",
        "18",
        "19"
      ],
      "correct_answer": 3,
      "explanation": "In 'x++', x is 5 but gets incremented after use. The calculation is (5 * 2) + 7 (after '++x'), resulting in 19."
    },
    {
      "id": 95,
      "category": "Advanced",
      "question": "What will happen if you execute the following code?\n\npublic class Main {\n  public static void main(String[] args) {\n    int a = 10 / 0;\n    System.out.println(a);\n  }\n}",
      "options": [
        "It will print 0.",
        "It will print Infinity.",
        "It will throw an ArithmeticException.",
        "It will cause a compilation error."
      ],
      "correct_answer": 2,
      "explanation": "Dividing an integer by 0 causes an ArithmeticException in Java."
    },
    {
      "id": 96,
      "category": "Advanced",
      "question": "What will the following code snippet print?\n\npublic class Main {\n  public static void main(String[] args) {\n    try {\n      int[] arr = new int[5];\n      System.out.println(arr[10]);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      System.out.println('Exception caught');\n    }\n  }\n}",
      "options": [
        "0",
        "Exception caught",
        "NullPointerException",
        "Compilation error"
      ],
      "correct_answer": 1,
      "explanation": "Accessing an out-of-bounds index in an array throws an ArrayIndexOutOfBoundsException, which is caught and handled by the catch block."
    },
    {
      "id": 97,
      "category": "Advanced",
      "question": "What is the result of running the following code?\n\npublic class Main {\n  public static void main(String[] args) {\n    String str1 = 'Java';\n    String str2 = 'Ja' + 'va';\n    System.out.println(str1 == str2);\n  }\n}",
      "options": [
        "true",
        "false",
        "Compilation error",
        "Runtime exception"
      ],
      "correct_answer": 0,
      "explanation": "String literals and concatenations of constants are interned by the compiler, so 'str1' and 'str2' point to the same object."
    },
    {
      "id": 98,
      "category": "Advanced",
      "question": "What does the following code output?\n\npublic class Main {\n  public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4};\n    for (int i : arr) {\n      if (i == 2) {\n        arr[i] = 10;\n      }\n    }\n    System.out.println(arr[2]);\n  }\n}",
      "options": [
        "2",
        "10",
        "3",
        "4"
      ],
      "correct_answer": 2,
      "explanation": "In the enhanced for-loop, modifications to the array inside the loop do not affect other iterations. 'arr[2]' remains 3."
    },
    {
      "id": 99,
      "category": "Advanced",
      "question": "What will the following code output?\n\npublic class Main {\n  public static void main(String[] args) {\n    String s1 = null;\n    System.out.println(s1 + 'Java');\n  }\n}",
      "options": [
        "nullJava",
        "Java",
        "Compilation error",
        "NullPointerException"
      ],
      "correct_answer": 0,
      "explanation": "When concatenating 'null' with a String, 'null' is treated as a String. The output is 'nullJava'."
    },
    {
      "id": 100,
      "category": "Advanced",
      "question": "What will happen if you execute the following code?\n\npublic class Main {\n  public static void main(String[] args) {\n    int[] nums = new int[0];\n    System.out.println(nums[0]);\n  }\n}",
      "options": [
        "It will print 0.",
        "It will throw an ArrayIndexOutOfBoundsException.",
        "It will throw a NullPointerException.",
        "It will cause a compilation error."
      ],
      "correct_answer": 1,
      "explanation": "Accessing any index in an empty array throws an ArrayIndexOutOfBoundsException."
    }
  ]
}
